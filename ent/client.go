// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"project-manager/ent/migrate"

	"project-manager/ent/clients"
	"project-manager/ent/packages"
	"project-manager/ent/projects"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Clients is the client for interacting with the Clients builders.
	Clients *ClientsClient
	// Packages is the client for interacting with the Packages builders.
	Packages *PackagesClient
	// Projects is the client for interacting with the Projects builders.
	Projects *ProjectsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Clients = NewClientsClient(c.config)
	c.Packages = NewPackagesClient(c.config)
	c.Projects = NewProjectsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Clients:  NewClientsClient(cfg),
		Packages: NewPackagesClient(cfg),
		Projects: NewProjectsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Clients:  NewClientsClient(cfg),
		Packages: NewPackagesClient(cfg),
		Projects: NewProjectsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Clients.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Clients.Use(hooks...)
	c.Packages.Use(hooks...)
	c.Projects.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Clients.Intercept(interceptors...)
	c.Packages.Intercept(interceptors...)
	c.Projects.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ClientsMutation:
		return c.Clients.mutate(ctx, m)
	case *PackagesMutation:
		return c.Packages.mutate(ctx, m)
	case *ProjectsMutation:
		return c.Projects.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ClientsClient is a client for the Clients schema.
type ClientsClient struct {
	config
}

// NewClientsClient returns a client for the Clients from the given config.
func NewClientsClient(c config) *ClientsClient {
	return &ClientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clients.Hooks(f(g(h())))`.
func (c *ClientsClient) Use(hooks ...Hook) {
	c.hooks.Clients = append(c.hooks.Clients, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clients.Intercept(f(g(h())))`.
func (c *ClientsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Clients = append(c.inters.Clients, interceptors...)
}

// Create returns a builder for creating a Clients entity.
func (c *ClientsClient) Create() *ClientsCreate {
	mutation := newClientsMutation(c.config, OpCreate)
	return &ClientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Clients entities.
func (c *ClientsClient) CreateBulk(builders ...*ClientsCreate) *ClientsCreateBulk {
	return &ClientsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClientsClient) MapCreateBulk(slice any, setFunc func(*ClientsCreate, int)) *ClientsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClientsCreateBulk{err: fmt.Errorf("calling to ClientsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClientsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Clients.
func (c *ClientsClient) Update() *ClientsUpdate {
	mutation := newClientsMutation(c.config, OpUpdate)
	return &ClientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClientsClient) UpdateOne(cl *Clients) *ClientsUpdateOne {
	mutation := newClientsMutation(c.config, OpUpdateOne, withClients(cl))
	return &ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClientsClient) UpdateOneID(id int) *ClientsUpdateOne {
	mutation := newClientsMutation(c.config, OpUpdateOne, withClientsID(id))
	return &ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Clients.
func (c *ClientsClient) Delete() *ClientsDelete {
	mutation := newClientsMutation(c.config, OpDelete)
	return &ClientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClientsClient) DeleteOne(cl *Clients) *ClientsDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClientsClient) DeleteOneID(id int) *ClientsDeleteOne {
	builder := c.Delete().Where(clients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClientsDeleteOne{builder}
}

// Query returns a query builder for Clients.
func (c *ClientsClient) Query() *ClientsQuery {
	return &ClientsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClients},
		inters: c.Interceptors(),
	}
}

// Get returns a Clients entity by its id.
func (c *ClientsClient) Get(ctx context.Context, id int) (*Clients, error) {
	return c.Query().Where(clients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClientsClient) GetX(ctx context.Context, id int) *Clients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ClientsClient) Hooks() []Hook {
	return c.hooks.Clients
}

// Interceptors returns the client interceptors.
func (c *ClientsClient) Interceptors() []Interceptor {
	return c.inters.Clients
}

func (c *ClientsClient) mutate(ctx context.Context, m *ClientsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClientsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClientsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClientsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Clients mutation op: %q", m.Op())
	}
}

// PackagesClient is a client for the Packages schema.
type PackagesClient struct {
	config
}

// NewPackagesClient returns a client for the Packages from the given config.
func NewPackagesClient(c config) *PackagesClient {
	return &PackagesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packages.Hooks(f(g(h())))`.
func (c *PackagesClient) Use(hooks ...Hook) {
	c.hooks.Packages = append(c.hooks.Packages, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packages.Intercept(f(g(h())))`.
func (c *PackagesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Packages = append(c.inters.Packages, interceptors...)
}

// Create returns a builder for creating a Packages entity.
func (c *PackagesClient) Create() *PackagesCreate {
	mutation := newPackagesMutation(c.config, OpCreate)
	return &PackagesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Packages entities.
func (c *PackagesClient) CreateBulk(builders ...*PackagesCreate) *PackagesCreateBulk {
	return &PackagesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagesClient) MapCreateBulk(slice any, setFunc func(*PackagesCreate, int)) *PackagesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagesCreateBulk{err: fmt.Errorf("calling to PackagesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Packages.
func (c *PackagesClient) Update() *PackagesUpdate {
	mutation := newPackagesMutation(c.config, OpUpdate)
	return &PackagesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagesClient) UpdateOne(pa *Packages) *PackagesUpdateOne {
	mutation := newPackagesMutation(c.config, OpUpdateOne, withPackages(pa))
	return &PackagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagesClient) UpdateOneID(id int) *PackagesUpdateOne {
	mutation := newPackagesMutation(c.config, OpUpdateOne, withPackagesID(id))
	return &PackagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Packages.
func (c *PackagesClient) Delete() *PackagesDelete {
	mutation := newPackagesMutation(c.config, OpDelete)
	return &PackagesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagesClient) DeleteOne(pa *Packages) *PackagesDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagesClient) DeleteOneID(id int) *PackagesDeleteOne {
	builder := c.Delete().Where(packages.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagesDeleteOne{builder}
}

// Query returns a query builder for Packages.
func (c *PackagesClient) Query() *PackagesQuery {
	return &PackagesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackages},
		inters: c.Interceptors(),
	}
}

// Get returns a Packages entity by its id.
func (c *PackagesClient) Get(ctx context.Context, id int) (*Packages, error) {
	return c.Query().Where(packages.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagesClient) GetX(ctx context.Context, id int) *Packages {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PackagesClient) Hooks() []Hook {
	return c.hooks.Packages
}

// Interceptors returns the client interceptors.
func (c *PackagesClient) Interceptors() []Interceptor {
	return c.inters.Packages
}

func (c *PackagesClient) mutate(ctx context.Context, m *PackagesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Packages mutation op: %q", m.Op())
	}
}

// ProjectsClient is a client for the Projects schema.
type ProjectsClient struct {
	config
}

// NewProjectsClient returns a client for the Projects from the given config.
func NewProjectsClient(c config) *ProjectsClient {
	return &ProjectsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projects.Hooks(f(g(h())))`.
func (c *ProjectsClient) Use(hooks ...Hook) {
	c.hooks.Projects = append(c.hooks.Projects, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projects.Intercept(f(g(h())))`.
func (c *ProjectsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Projects = append(c.inters.Projects, interceptors...)
}

// Create returns a builder for creating a Projects entity.
func (c *ProjectsClient) Create() *ProjectsCreate {
	mutation := newProjectsMutation(c.config, OpCreate)
	return &ProjectsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Projects entities.
func (c *ProjectsClient) CreateBulk(builders ...*ProjectsCreate) *ProjectsCreateBulk {
	return &ProjectsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectsClient) MapCreateBulk(slice any, setFunc func(*ProjectsCreate, int)) *ProjectsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectsCreateBulk{err: fmt.Errorf("calling to ProjectsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Projects.
func (c *ProjectsClient) Update() *ProjectsUpdate {
	mutation := newProjectsMutation(c.config, OpUpdate)
	return &ProjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectsClient) UpdateOne(pr *Projects) *ProjectsUpdateOne {
	mutation := newProjectsMutation(c.config, OpUpdateOne, withProjects(pr))
	return &ProjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectsClient) UpdateOneID(id int) *ProjectsUpdateOne {
	mutation := newProjectsMutation(c.config, OpUpdateOne, withProjectsID(id))
	return &ProjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Projects.
func (c *ProjectsClient) Delete() *ProjectsDelete {
	mutation := newProjectsMutation(c.config, OpDelete)
	return &ProjectsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectsClient) DeleteOne(pr *Projects) *ProjectsDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectsClient) DeleteOneID(id int) *ProjectsDeleteOne {
	builder := c.Delete().Where(projects.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectsDeleteOne{builder}
}

// Query returns a query builder for Projects.
func (c *ProjectsClient) Query() *ProjectsQuery {
	return &ProjectsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjects},
		inters: c.Interceptors(),
	}
}

// Get returns a Projects entity by its id.
func (c *ProjectsClient) Get(ctx context.Context, id int) (*Projects, error) {
	return c.Query().Where(projects.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectsClient) GetX(ctx context.Context, id int) *Projects {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProjectsClient) Hooks() []Hook {
	return c.hooks.Projects
}

// Interceptors returns the client interceptors.
func (c *ProjectsClient) Interceptors() []Interceptor {
	return c.inters.Projects
}

func (c *ProjectsClient) mutate(ctx context.Context, m *ProjectsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Projects mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Clients, Packages, Projects []ent.Hook
	}
	inters struct {
		Clients, Packages, Projects []ent.Interceptor
	}
)
