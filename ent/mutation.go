// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-manager/ent/packages"
	"project-manager/ent/predicate"
	"project-manager/ent/projects"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePackages = "Packages"
	TypeProjects = "Projects"
)

// PackagesMutation represents an operation that mutates the Packages nodes in the graph.
type PackagesMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	link          *string
	description   *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Packages, error)
	predicates    []predicate.Packages
}

var _ ent.Mutation = (*PackagesMutation)(nil)

// packagesOption allows management of the mutation configuration using functional options.
type packagesOption func(*PackagesMutation)

// newPackagesMutation creates new mutation for the Packages entity.
func newPackagesMutation(c config, op Op, opts ...packagesOption) *PackagesMutation {
	m := &PackagesMutation{
		config:        c,
		op:            op,
		typ:           TypePackages,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPackagesID sets the ID field of the mutation.
func withPackagesID(id int) packagesOption {
	return func(m *PackagesMutation) {
		var (
			err   error
			once  sync.Once
			value *Packages
		)
		m.oldValue = func(ctx context.Context) (*Packages, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Packages.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPackages sets the old Packages of the mutation.
func withPackages(node *Packages) packagesOption {
	return func(m *PackagesMutation) {
		m.oldValue = func(context.Context) (*Packages, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PackagesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PackagesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PackagesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PackagesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Packages.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PackagesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PackagesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PackagesMutation) ResetName() {
	m.name = nil
}

// SetLink sets the "link" field.
func (m *PackagesMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *PackagesMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *PackagesMutation) ClearLink() {
	m.link = nil
	m.clearedFields[packages.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *PackagesMutation) LinkCleared() bool {
	_, ok := m.clearedFields[packages.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *PackagesMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, packages.FieldLink)
}

// SetDescription sets the "description" field.
func (m *PackagesMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PackagesMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PackagesMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[packages.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PackagesMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[packages.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PackagesMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, packages.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *PackagesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PackagesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PackagesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PackagesMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PackagesMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PackagesMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PackagesMutation builder.
func (m *PackagesMutation) Where(ps ...predicate.Packages) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PackagesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PackagesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Packages, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PackagesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PackagesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Packages).
func (m *PackagesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PackagesMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, packages.FieldName)
	}
	if m.link != nil {
		fields = append(fields, packages.FieldLink)
	}
	if m.description != nil {
		fields = append(fields, packages.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, packages.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, packages.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PackagesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case packages.FieldName:
		return m.Name()
	case packages.FieldLink:
		return m.Link()
	case packages.FieldDescription:
		return m.Description()
	case packages.FieldCreatedAt:
		return m.CreatedAt()
	case packages.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PackagesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case packages.FieldName:
		return m.OldName(ctx)
	case packages.FieldLink:
		return m.OldLink(ctx)
	case packages.FieldDescription:
		return m.OldDescription(ctx)
	case packages.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case packages.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Packages field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PackagesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case packages.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case packages.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case packages.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case packages.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case packages.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Packages field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PackagesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PackagesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PackagesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Packages numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PackagesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(packages.FieldLink) {
		fields = append(fields, packages.FieldLink)
	}
	if m.FieldCleared(packages.FieldDescription) {
		fields = append(fields, packages.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PackagesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PackagesMutation) ClearField(name string) error {
	switch name {
	case packages.FieldLink:
		m.ClearLink()
		return nil
	case packages.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Packages nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PackagesMutation) ResetField(name string) error {
	switch name {
	case packages.FieldName:
		m.ResetName()
		return nil
	case packages.FieldLink:
		m.ResetLink()
		return nil
	case packages.FieldDescription:
		m.ResetDescription()
		return nil
	case packages.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case packages.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Packages field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PackagesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PackagesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PackagesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PackagesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PackagesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PackagesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PackagesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Packages unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PackagesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Packages edge %s", name)
}

// ProjectsMutation represents an operation that mutates the Projects nodes in the graph.
type ProjectsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	imageUrl      *string
	link          *string
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Projects, error)
	predicates    []predicate.Projects
}

var _ ent.Mutation = (*ProjectsMutation)(nil)

// projectsOption allows management of the mutation configuration using functional options.
type projectsOption func(*ProjectsMutation)

// newProjectsMutation creates new mutation for the Projects entity.
func newProjectsMutation(c config, op Op, opts ...projectsOption) *ProjectsMutation {
	m := &ProjectsMutation{
		config:        c,
		op:            op,
		typ:           TypeProjects,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectsID sets the ID field of the mutation.
func withProjectsID(id int) projectsOption {
	return func(m *ProjectsMutation) {
		var (
			err   error
			once  sync.Once
			value *Projects
		)
		m.oldValue = func(ctx context.Context) (*Projects, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Projects.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjects sets the old Projects of the mutation.
func withProjects(node *Projects) projectsOption {
	return func(m *ProjectsMutation) {
		m.oldValue = func(context.Context) (*Projects, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Projects.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Projects entity.
// If the Projects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectsMutation) ResetName() {
	m.name = nil
}

// SetImageUrl sets the "imageUrl" field.
func (m *ProjectsMutation) SetImageUrl(s string) {
	m.imageUrl = &s
}

// ImageUrl returns the value of the "imageUrl" field in the mutation.
func (m *ProjectsMutation) ImageUrl() (r string, exists bool) {
	v := m.imageUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl returns the old "imageUrl" field's value of the Projects entity.
// If the Projects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectsMutation) OldImageUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl: %w", err)
	}
	return oldValue.ImageUrl, nil
}

// ClearImageUrl clears the value of the "imageUrl" field.
func (m *ProjectsMutation) ClearImageUrl() {
	m.imageUrl = nil
	m.clearedFields[projects.FieldImageUrl] = struct{}{}
}

// ImageUrlCleared returns if the "imageUrl" field was cleared in this mutation.
func (m *ProjectsMutation) ImageUrlCleared() bool {
	_, ok := m.clearedFields[projects.FieldImageUrl]
	return ok
}

// ResetImageUrl resets all changes to the "imageUrl" field.
func (m *ProjectsMutation) ResetImageUrl() {
	m.imageUrl = nil
	delete(m.clearedFields, projects.FieldImageUrl)
}

// SetLink sets the "link" field.
func (m *ProjectsMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *ProjectsMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Projects entity.
// If the Projects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectsMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *ProjectsMutation) ClearLink() {
	m.link = nil
	m.clearedFields[projects.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *ProjectsMutation) LinkCleared() bool {
	_, ok := m.clearedFields[projects.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *ProjectsMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, projects.FieldLink)
}

// SetDescription sets the "description" field.
func (m *ProjectsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Projects entity.
// If the Projects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectsMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[projects.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectsMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[projects.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectsMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, projects.FieldDescription)
}

// Where appends a list predicates to the ProjectsMutation builder.
func (m *ProjectsMutation) Where(ps ...predicate.Projects) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Projects, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Projects).
func (m *ProjectsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, projects.FieldName)
	}
	if m.imageUrl != nil {
		fields = append(fields, projects.FieldImageUrl)
	}
	if m.link != nil {
		fields = append(fields, projects.FieldLink)
	}
	if m.description != nil {
		fields = append(fields, projects.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projects.FieldName:
		return m.Name()
	case projects.FieldImageUrl:
		return m.ImageUrl()
	case projects.FieldLink:
		return m.Link()
	case projects.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projects.FieldName:
		return m.OldName(ctx)
	case projects.FieldImageUrl:
		return m.OldImageUrl(ctx)
	case projects.FieldLink:
		return m.OldLink(ctx)
	case projects.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Projects field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projects.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case projects.FieldImageUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl(v)
		return nil
	case projects.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case projects.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Projects field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Projects numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(projects.FieldImageUrl) {
		fields = append(fields, projects.FieldImageUrl)
	}
	if m.FieldCleared(projects.FieldLink) {
		fields = append(fields, projects.FieldLink)
	}
	if m.FieldCleared(projects.FieldDescription) {
		fields = append(fields, projects.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectsMutation) ClearField(name string) error {
	switch name {
	case projects.FieldImageUrl:
		m.ClearImageUrl()
		return nil
	case projects.FieldLink:
		m.ClearLink()
		return nil
	case projects.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Projects nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectsMutation) ResetField(name string) error {
	switch name {
	case projects.FieldName:
		m.ResetName()
		return nil
	case projects.FieldImageUrl:
		m.ResetImageUrl()
		return nil
	case projects.FieldLink:
		m.ResetLink()
		return nil
	case projects.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Projects field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Projects unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Projects edge %s", name)
}
