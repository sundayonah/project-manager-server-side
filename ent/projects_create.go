// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-manager/ent/projects"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectsCreate is the builder for creating a Projects entity.
type ProjectsCreate struct {
	config
	mutation *ProjectsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProjectsCreate) SetName(s string) *ProjectsCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetImageUrl sets the "imageUrl" field.
func (pc *ProjectsCreate) SetImageUrl(s string) *ProjectsCreate {
	pc.mutation.SetImageUrl(s)
	return pc
}

// SetNillableImageUrl sets the "imageUrl" field if the given value is not nil.
func (pc *ProjectsCreate) SetNillableImageUrl(s *string) *ProjectsCreate {
	if s != nil {
		pc.SetImageUrl(*s)
	}
	return pc
}

// SetLink sets the "link" field.
func (pc *ProjectsCreate) SetLink(s string) *ProjectsCreate {
	pc.mutation.SetLink(s)
	return pc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (pc *ProjectsCreate) SetNillableLink(s *string) *ProjectsCreate {
	if s != nil {
		pc.SetLink(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectsCreate) SetDescription(s string) *ProjectsCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProjectsCreate) SetNillableDescription(s *string) *ProjectsCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetStacks sets the "stacks" field.
func (pc *ProjectsCreate) SetStacks(s string) *ProjectsCreate {
	pc.mutation.SetStacks(s)
	return pc
}

// SetNillableStacks sets the "stacks" field if the given value is not nil.
func (pc *ProjectsCreate) SetNillableStacks(s *string) *ProjectsCreate {
	if s != nil {
		pc.SetStacks(*s)
	}
	return pc
}

// Mutation returns the ProjectsMutation object of the builder.
func (pc *ProjectsCreate) Mutation() *ProjectsMutation {
	return pc.mutation
}

// Save creates the Projects in the database.
func (pc *ProjectsCreate) Save(ctx context.Context) (*Projects, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectsCreate) SaveX(ctx context.Context) *Projects {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectsCreate) defaults() {
	if _, ok := pc.mutation.Stacks(); !ok {
		v := projects.DefaultStacks
		pc.mutation.SetStacks(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectsCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Projects.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := projects.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Projects.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Stacks(); !ok {
		return &ValidationError{Name: "stacks", err: errors.New(`ent: missing required field "Projects.stacks"`)}
	}
	return nil
}

func (pc *ProjectsCreate) sqlSave(ctx context.Context) (*Projects, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectsCreate) createSpec() (*Projects, *sqlgraph.CreateSpec) {
	var (
		_node = &Projects{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(projects.Table, sqlgraph.NewFieldSpec(projects.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(projects.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.ImageUrl(); ok {
		_spec.SetField(projects.FieldImageUrl, field.TypeString, value)
		_node.ImageUrl = value
	}
	if value, ok := pc.mutation.Link(); ok {
		_spec.SetField(projects.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(projects.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Stacks(); ok {
		_spec.SetField(projects.FieldStacks, field.TypeString, value)
		_node.Stacks = value
	}
	return _node, _spec
}

// ProjectsCreateBulk is the builder for creating many Projects entities in bulk.
type ProjectsCreateBulk struct {
	config
	err      error
	builders []*ProjectsCreate
}

// Save creates the Projects entities in the database.
func (pcb *ProjectsCreateBulk) Save(ctx context.Context) ([]*Projects, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Projects, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectsCreateBulk) SaveX(ctx context.Context) []*Projects {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
