// Code generated by ent, DO NOT EDIT.

package packages

import (
	"project-manager/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldName, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldLink, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldDescription, v))
}

// Stacks applies equality check predicate on the "stacks" field. It's identical to StacksEQ.
func Stacks(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldStacks, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContainsFold(FieldName, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.Packages {
	return predicate.Packages(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.Packages {
	return predicate.Packages(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContainsFold(FieldLink, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Packages {
	return predicate.Packages(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Packages {
	return predicate.Packages(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContainsFold(FieldDescription, v))
}

// StacksEQ applies the EQ predicate on the "stacks" field.
func StacksEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldStacks, v))
}

// StacksNEQ applies the NEQ predicate on the "stacks" field.
func StacksNEQ(v string) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldStacks, v))
}

// StacksIn applies the In predicate on the "stacks" field.
func StacksIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldStacks, vs...))
}

// StacksNotIn applies the NotIn predicate on the "stacks" field.
func StacksNotIn(vs ...string) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldStacks, vs...))
}

// StacksGT applies the GT predicate on the "stacks" field.
func StacksGT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldStacks, v))
}

// StacksGTE applies the GTE predicate on the "stacks" field.
func StacksGTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldStacks, v))
}

// StacksLT applies the LT predicate on the "stacks" field.
func StacksLT(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldStacks, v))
}

// StacksLTE applies the LTE predicate on the "stacks" field.
func StacksLTE(v string) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldStacks, v))
}

// StacksContains applies the Contains predicate on the "stacks" field.
func StacksContains(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContains(FieldStacks, v))
}

// StacksHasPrefix applies the HasPrefix predicate on the "stacks" field.
func StacksHasPrefix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasPrefix(FieldStacks, v))
}

// StacksHasSuffix applies the HasSuffix predicate on the "stacks" field.
func StacksHasSuffix(v string) predicate.Packages {
	return predicate.Packages(sql.FieldHasSuffix(FieldStacks, v))
}

// StacksEqualFold applies the EqualFold predicate on the "stacks" field.
func StacksEqualFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldEqualFold(FieldStacks, v))
}

// StacksContainsFold applies the ContainsFold predicate on the "stacks" field.
func StacksContainsFold(v string) predicate.Packages {
	return predicate.Packages(sql.FieldContainsFold(FieldStacks, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Packages {
	return predicate.Packages(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Packages) predicate.Packages {
	return predicate.Packages(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Packages) predicate.Packages {
	return predicate.Packages(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Packages) predicate.Packages {
	return predicate.Packages(sql.NotPredicates(p))
}
