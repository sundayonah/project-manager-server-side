// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-manager/ent/predicate"
	"project-manager/ent/projects"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectsUpdate is the builder for updating Projects entities.
type ProjectsUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectsMutation
}

// Where appends a list predicates to the ProjectsUpdate builder.
func (pu *ProjectsUpdate) Where(ps ...predicate.Projects) *ProjectsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectsUpdate) SetName(s string) *ProjectsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectsUpdate) SetNillableName(s *string) *ProjectsUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetImageUrl sets the "imageUrl" field.
func (pu *ProjectsUpdate) SetImageUrl(s string) *ProjectsUpdate {
	pu.mutation.SetImageUrl(s)
	return pu
}

// SetNillableImageUrl sets the "imageUrl" field if the given value is not nil.
func (pu *ProjectsUpdate) SetNillableImageUrl(s *string) *ProjectsUpdate {
	if s != nil {
		pu.SetImageUrl(*s)
	}
	return pu
}

// ClearImageUrl clears the value of the "imageUrl" field.
func (pu *ProjectsUpdate) ClearImageUrl() *ProjectsUpdate {
	pu.mutation.ClearImageUrl()
	return pu
}

// SetLink sets the "link" field.
func (pu *ProjectsUpdate) SetLink(s string) *ProjectsUpdate {
	pu.mutation.SetLink(s)
	return pu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (pu *ProjectsUpdate) SetNillableLink(s *string) *ProjectsUpdate {
	if s != nil {
		pu.SetLink(*s)
	}
	return pu
}

// ClearLink clears the value of the "link" field.
func (pu *ProjectsUpdate) ClearLink() *ProjectsUpdate {
	pu.mutation.ClearLink()
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectsUpdate) SetDescription(s string) *ProjectsUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectsUpdate) SetNillableDescription(s *string) *ProjectsUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectsUpdate) ClearDescription() *ProjectsUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetStacks sets the "stacks" field.
func (pu *ProjectsUpdate) SetStacks(s string) *ProjectsUpdate {
	pu.mutation.SetStacks(s)
	return pu
}

// SetNillableStacks sets the "stacks" field if the given value is not nil.
func (pu *ProjectsUpdate) SetNillableStacks(s *string) *ProjectsUpdate {
	if s != nil {
		pu.SetStacks(*s)
	}
	return pu
}

// Mutation returns the ProjectsMutation object of the builder.
func (pu *ProjectsUpdate) Mutation() *ProjectsMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectsUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := projects.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Projects.name": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projects.Table, projects.Columns, sqlgraph.NewFieldSpec(projects.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(projects.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.ImageUrl(); ok {
		_spec.SetField(projects.FieldImageUrl, field.TypeString, value)
	}
	if pu.mutation.ImageUrlCleared() {
		_spec.ClearField(projects.FieldImageUrl, field.TypeString)
	}
	if value, ok := pu.mutation.Link(); ok {
		_spec.SetField(projects.FieldLink, field.TypeString, value)
	}
	if pu.mutation.LinkCleared() {
		_spec.ClearField(projects.FieldLink, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(projects.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(projects.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Stacks(); ok {
		_spec.SetField(projects.FieldStacks, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectsUpdateOne is the builder for updating a single Projects entity.
type ProjectsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectsMutation
}

// SetName sets the "name" field.
func (puo *ProjectsUpdateOne) SetName(s string) *ProjectsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectsUpdateOne) SetNillableName(s *string) *ProjectsUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetImageUrl sets the "imageUrl" field.
func (puo *ProjectsUpdateOne) SetImageUrl(s string) *ProjectsUpdateOne {
	puo.mutation.SetImageUrl(s)
	return puo
}

// SetNillableImageUrl sets the "imageUrl" field if the given value is not nil.
func (puo *ProjectsUpdateOne) SetNillableImageUrl(s *string) *ProjectsUpdateOne {
	if s != nil {
		puo.SetImageUrl(*s)
	}
	return puo
}

// ClearImageUrl clears the value of the "imageUrl" field.
func (puo *ProjectsUpdateOne) ClearImageUrl() *ProjectsUpdateOne {
	puo.mutation.ClearImageUrl()
	return puo
}

// SetLink sets the "link" field.
func (puo *ProjectsUpdateOne) SetLink(s string) *ProjectsUpdateOne {
	puo.mutation.SetLink(s)
	return puo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (puo *ProjectsUpdateOne) SetNillableLink(s *string) *ProjectsUpdateOne {
	if s != nil {
		puo.SetLink(*s)
	}
	return puo
}

// ClearLink clears the value of the "link" field.
func (puo *ProjectsUpdateOne) ClearLink() *ProjectsUpdateOne {
	puo.mutation.ClearLink()
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProjectsUpdateOne) SetDescription(s string) *ProjectsUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectsUpdateOne) SetNillableDescription(s *string) *ProjectsUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectsUpdateOne) ClearDescription() *ProjectsUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetStacks sets the "stacks" field.
func (puo *ProjectsUpdateOne) SetStacks(s string) *ProjectsUpdateOne {
	puo.mutation.SetStacks(s)
	return puo
}

// SetNillableStacks sets the "stacks" field if the given value is not nil.
func (puo *ProjectsUpdateOne) SetNillableStacks(s *string) *ProjectsUpdateOne {
	if s != nil {
		puo.SetStacks(*s)
	}
	return puo
}

// Mutation returns the ProjectsMutation object of the builder.
func (puo *ProjectsUpdateOne) Mutation() *ProjectsMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProjectsUpdate builder.
func (puo *ProjectsUpdateOne) Where(ps ...predicate.Projects) *ProjectsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectsUpdateOne) Select(field string, fields ...string) *ProjectsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Projects entity.
func (puo *ProjectsUpdateOne) Save(ctx context.Context) (*Projects, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectsUpdateOne) SaveX(ctx context.Context) *Projects {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectsUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := projects.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Projects.name": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectsUpdateOne) sqlSave(ctx context.Context) (_node *Projects, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projects.Table, projects.Columns, sqlgraph.NewFieldSpec(projects.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Projects.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projects.FieldID)
		for _, f := range fields {
			if !projects.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projects.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(projects.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.ImageUrl(); ok {
		_spec.SetField(projects.FieldImageUrl, field.TypeString, value)
	}
	if puo.mutation.ImageUrlCleared() {
		_spec.ClearField(projects.FieldImageUrl, field.TypeString)
	}
	if value, ok := puo.mutation.Link(); ok {
		_spec.SetField(projects.FieldLink, field.TypeString, value)
	}
	if puo.mutation.LinkCleared() {
		_spec.ClearField(projects.FieldLink, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(projects.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(projects.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Stacks(); ok {
		_spec.SetField(projects.FieldStacks, field.TypeString, value)
	}
	_node = &Projects{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
