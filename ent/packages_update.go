// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-manager/ent/packages"
	"project-manager/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagesUpdate is the builder for updating Packages entities.
type PackagesUpdate struct {
	config
	hooks    []Hook
	mutation *PackagesMutation
}

// Where appends a list predicates to the PackagesUpdate builder.
func (pu *PackagesUpdate) Where(ps ...predicate.Packages) *PackagesUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PackagesUpdate) SetName(s string) *PackagesUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PackagesUpdate) SetNillableName(s *string) *PackagesUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetLink sets the "link" field.
func (pu *PackagesUpdate) SetLink(s string) *PackagesUpdate {
	pu.mutation.SetLink(s)
	return pu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (pu *PackagesUpdate) SetNillableLink(s *string) *PackagesUpdate {
	if s != nil {
		pu.SetLink(*s)
	}
	return pu
}

// ClearLink clears the value of the "link" field.
func (pu *PackagesUpdate) ClearLink() *PackagesUpdate {
	pu.mutation.ClearLink()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PackagesUpdate) SetDescription(s string) *PackagesUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PackagesUpdate) SetNillableDescription(s *string) *PackagesUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PackagesUpdate) ClearDescription() *PackagesUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PackagesUpdate) SetCreatedAt(t time.Time) *PackagesUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PackagesUpdate) SetNillableCreatedAt(t *time.Time) *PackagesUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PackagesUpdate) SetUpdatedAt(t time.Time) *PackagesUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// Mutation returns the PackagesMutation object of the builder.
func (pu *PackagesUpdate) Mutation() *PackagesMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PackagesUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PackagesUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PackagesUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PackagesUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PackagesUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := packages.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PackagesUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := packages.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Packages.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := packages.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Packages.description": %w`, err)}
		}
	}
	return nil
}

func (pu *PackagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packages.Table, packages.Columns, sqlgraph.NewFieldSpec(packages.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(packages.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Link(); ok {
		_spec.SetField(packages.FieldLink, field.TypeString, value)
	}
	if pu.mutation.LinkCleared() {
		_spec.ClearField(packages.FieldLink, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(packages.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(packages.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(packages.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(packages.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PackagesUpdateOne is the builder for updating a single Packages entity.
type PackagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagesMutation
}

// SetName sets the "name" field.
func (puo *PackagesUpdateOne) SetName(s string) *PackagesUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PackagesUpdateOne) SetNillableName(s *string) *PackagesUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetLink sets the "link" field.
func (puo *PackagesUpdateOne) SetLink(s string) *PackagesUpdateOne {
	puo.mutation.SetLink(s)
	return puo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (puo *PackagesUpdateOne) SetNillableLink(s *string) *PackagesUpdateOne {
	if s != nil {
		puo.SetLink(*s)
	}
	return puo
}

// ClearLink clears the value of the "link" field.
func (puo *PackagesUpdateOne) ClearLink() *PackagesUpdateOne {
	puo.mutation.ClearLink()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PackagesUpdateOne) SetDescription(s string) *PackagesUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PackagesUpdateOne) SetNillableDescription(s *string) *PackagesUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PackagesUpdateOne) ClearDescription() *PackagesUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PackagesUpdateOne) SetCreatedAt(t time.Time) *PackagesUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PackagesUpdateOne) SetNillableCreatedAt(t *time.Time) *PackagesUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PackagesUpdateOne) SetUpdatedAt(t time.Time) *PackagesUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// Mutation returns the PackagesMutation object of the builder.
func (puo *PackagesUpdateOne) Mutation() *PackagesMutation {
	return puo.mutation
}

// Where appends a list predicates to the PackagesUpdate builder.
func (puo *PackagesUpdateOne) Where(ps ...predicate.Packages) *PackagesUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PackagesUpdateOne) Select(field string, fields ...string) *PackagesUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Packages entity.
func (puo *PackagesUpdateOne) Save(ctx context.Context) (*Packages, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PackagesUpdateOne) SaveX(ctx context.Context) *Packages {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PackagesUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PackagesUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PackagesUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := packages.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PackagesUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := packages.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Packages.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := packages.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Packages.description": %w`, err)}
		}
	}
	return nil
}

func (puo *PackagesUpdateOne) sqlSave(ctx context.Context) (_node *Packages, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packages.Table, packages.Columns, sqlgraph.NewFieldSpec(packages.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Packages.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packages.FieldID)
		for _, f := range fields {
			if !packages.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packages.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(packages.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Link(); ok {
		_spec.SetField(packages.FieldLink, field.TypeString, value)
	}
	if puo.mutation.LinkCleared() {
		_spec.ClearField(packages.FieldLink, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(packages.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(packages.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(packages.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(packages.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Packages{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
